package main

import (
	"os"
	"fmt"

	"github.com/01-edu/z01"
)

// i give up! how do we check for overflow when it's still a string

func main() {
	allArgs := os.Args[1:]

	if len(allArgs) == 3 && (IsNumeric(allArgs[0]) && IsNumeric(allArgs[2])) {
		var num1 int = Atoi(allArgs[1])
		var num2 int = Atoi(allArgs[2])
		result := 34404

		if allArgs[1] == "/" && allArgs[2] == "0" {
			PrintStr("No division by 0\n")
			return
		}

		if allArgs[1] == "%" && allArgs[2] == "0" {
			PrintStr("No modulo by 0\n")
			return
		}

		// if s, err := strconv.Atoi(allArgs[0]); err == nil {
		// 	num1 = s
		// }

		// if t, err := strconv.Atoi(allArgs[2]); err == nil {
		// 	num2 = t
		// }

		if allArgs[1] == "-" {
			result = num1 - num2
		} else if allArgs[1] == "+" {
			result = num1 + num2
		} else if allArgs[1] == "/" {
			result = num1 / num2
		} else if allArgs[1] == "%" {
			result = num1 % num2
		} else if allArgs[1] == "*" {
			result = num1 * num2
		} else {
			return
		}

		fmt.Println(InLimit(result), InLimit(num1), InLimit(num2))
		fmt.Println(result, num1, num2)

		if InLimit(result) && (InLimit(num1) && InLimit(num2))  {
			PrintNbr(result)
			z01.PrintRune('\n')
		} else {
			return
		}
	}
}

func InLimit(n int) bool {
	if n > -9223372036854775808 && n < 9223372036854775807 {
		return true
	} else {
		return false
	}
}
func PrintNbr(n int) {
	if n < 0 {
		z01.PrintRune('-')
		if n/10 != 0 {
			PrintNbr(n / -10)
		}

		mod := '0'

		for i := 0; i < -(n % 10); i++ {
			mod++
		}

		z01.PrintRune(mod)

	} else if n == 0 {
		z01.PrintRune('0')
	} else {
		if n/10 != 0 {
			PrintNbr(n / 10)
		}
		mod := '0'

		for i := 0; i < n%10; i++ {
			mod++
		}
		z01.PrintRune(mod)
	}
}

func PrintStr(s string) {
	runes := []rune(s)

	for i := 0; i < len(runes); i++ {
		z01.PrintRune(runes[i])
	}
}

func IsNumeric(s string) bool {
	runes := []rune(s)

	if runes[0] == '-' {
		runes = runes[1:]
	}

	for _, element := range runes {
		if element >= 48 && element <= 57 {
			continue
		} else {
			return false
		}
	}
	return true
}

// func WillOverflow(s string) bool {
// 	runes := []rune(s)
// 	if len(runes) >= 20 {
// 		return true
// 	} else if len(runes) <= 18 {
// 		return false
// 	} else if len(runes)==20 && runes
// }

func Atoi(s string) int {
	var result int

	var isInvalid bool
	var isNegative bool

	byteArray := []byte(s)
	intArray := []int{}

	// it is only negative if ONE minus at the front
	// one + at the front is positive

	// + or - in other positions than [0] means invalid

	if len(s) < 1 {
		isInvalid = true
	} else {

		for i := 0; i < len(byteArray); i++ {
			switch byteArray[i] {
			case 45: // minus sign
				intArray = append(intArray, 0) // so the array doesn't lose length
			case 43: // plus sign
				intArray = append(intArray, 0) // so the array doesn't lose length
			case 48:
				intArray = append(intArray, 0)
			case 49:
				intArray = append(intArray, 1)
			case 50:
				intArray = append(intArray, 2)
			case 51:
				intArray = append(intArray, 3)
			case 52:
				intArray = append(intArray, 4)
			case 53:
				intArray = append(intArray, 5)
			case 54:
				intArray = append(intArray, 6)
			case 55:
				intArray = append(intArray, 7)
			case 56:
				intArray = append(intArray, 8)
			case 57:
				intArray = append(intArray, 9)
			default:
				isInvalid = true
			}
		}

		// test if negative or invalid now
		if byteArray[0] == 45 {
			isNegative = true
		}

		if len(byteArray) > 1 {
			for i := 1; i < len(byteArray); i++ {
				if byteArray[i] == 45 || byteArray[i] == 43 {
					isInvalid = true
				}
			}
		}
	}

	if isInvalid {
		result = 0
	} else {
		op := 1
		for i := len(s) - 1; i >= 0; i-- {
			result += intArray[i] * op
			op *= 10
		}
	}

	if isNegative {
		result = 0 - result
	}

	return result 
}